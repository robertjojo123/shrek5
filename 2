local monitor = peripheral.find("monitor")

if not monitor then
    error("No monitor found! Attach a monitor to use this script.", 0)
end

monitor.setTextScale(0.5)  -- Adjust text scale for large monitors
monitor.setBackgroundColor(colors.black)
monitor.clear()

-- Set base video URL
local baseURL = "https://raw.githubusercontent.com/robertjojo123/shrek5/refs/heads/main/video_part_"

-- Get computer label and determine quadrant
local quadrant = os.getComputerLabel()
local quadrantIndex = tonumber(string.sub(quadrant, -1))  -- Extracts 0,1,2,3

if quadrantIndex == nil or quadrantIndex < 0 or quadrantIndex > 3 then
    error("Error: This computer's label must be 'comp0', 'comp1', 'comp2', or 'comp3'.", 0)
end

local firstVideoDuration = 38000  -- 38s
local otherVideoDuration = 45000  -- 45s
local frameInterval = 200          -- **200ms per frame (5 FPS)**
local downloadTime = 0             -- **Tracks time spent downloading**
local previousFrame = {}           -- **Cache for flicker reduction**

function getMovieURL(index)
    return baseURL .. index .. "_q" .. quadrantIndex .. ".nfv"
end

function downloadVideo(index, filename)
    local url = getMovieURL(index)
    print("Downloading:", url)

    local startTime = os.epoch("utc")  -- Start timing download
    local response = http.get(url)

    if response then
        local file = fs.open(filename, "wb")
        file.write(response.readAll())
        file.close()
        response.close()

        downloadTime = os.epoch("utc") - startTime  -- Calculate download time
        return true
    else
        print("Failed to download:", filename)
    end

    return false
end

function loadVideo(videoFile)
    local videoData = {}
    for line in io.lines(videoFile) do
        table.insert(videoData, line)
    end
    local resolution = { videoData[1]:match("(%d+) (%d+)") }
    table.remove(videoData, 1)
    return videoData, resolution
end

function drawFrame(frameLines, frameWidth, frameHeight)
    term.redirect(monitor)  -- Output directly to monitor
    for y = 1, frameHeight do
        local line = frameLines[y]
        if line then
            term.setCursorPos(1, y)  -- Move cursor to start of line
            term.blit(line, line, line)  -- Write entire line in one go
        end
    end
    term.redirect(term.native())  -- Restore terminal
end

function playVideo(videoFile, videoStartTime, videoIndex)
    local videoData, resolution = loadVideo(videoFile)
    if not videoData or not resolution then
        print("Error loading video data.")
        return
    end

    local frameWidth, frameHeight = tonumber(resolution[1]), tonumber(resolution[2])
    if not frameWidth or not frameHeight then
        print("Invalid resolution in video file.")
        return
    end

    local frameIndex = 1
    local videoEndTime = videoStartTime + (videoIndex == 1 and firstVideoDuration or otherVideoDuration)

    while os.epoch("utc") < videoEndTime do
        local frameStartTime = os.epoch("utc")  -- **Start frame timer**

        -- **Extract full frame data from video file**
        local frameLines = {}
        for i = 1, frameHeight do
            if frameIndex + i > #videoData then
                break
            end
            table.insert(frameLines, videoData[frameIndex + i])
        end

        -- **Draw frame using optimized blit rendering**
        if #frameLines > 0 then
            drawFrame(frameLines, frameWidth, frameHeight)
        end

        frameIndex = frameIndex + frameHeight

        -- **Stop playing if past the last frame**
        if frameIndex > #videoData then
            break
        end

        -- **Ensure EXACT 200ms per frame timing, accounting for download time**
        local elapsedTime = os.epoch("utc") - frameStartTime
        local sleepTime = (frameInterval - elapsedTime - (downloadTime / frameHeight)) / 1000  -- Convert to seconds

        if sleepTime > 0 then
            os.sleep(sleepTime)
        end
    end
end

function playMovie()
    local videoIndex = 1
    local videoStartTime = os.epoch("utc")

    monitor.setBackgroundColor(colors.black)
    monitor.clear()
    
    print("Preparing to play movie...")
    os.sleep(0.75)  -- **750ms delay before first video starts**

    parallel.waitForAny(
        function()
            while true do
                print("Downloading video part:", videoIndex)
                if not downloadVideo(videoIndex, "/current_video.nfv") then 
                    print("No more video parts available, stopping playback.")
                    break 
                end

                local nextIndex = videoIndex + 1
                local nextFile = "/next_video.nfv"

                print("Pre-downloading next part:", nextIndex)
                downloadVideo(nextIndex, nextFile)

                print("Playing video part:", videoIndex)
                playVideo("/current_video.nfv", videoStartTime, videoIndex)
                fs.delete("/current_video.nfv")

                if fs.exists(nextFile) then
                    fs.move(nextFile, "/current_video.nfv")
                    videoIndex = nextIndex
                    videoStartTime = os.epoch("utc") + firstVideoDuration + ((videoIndex - 2) * otherVideoDuration)
                else
                    break
                end
            end
        end
    )
end

print("Waiting for redstone signal...")

while true do
    -- **Check for redstone signal from ANY side**
    if redstone.getInput("top") or redstone.getInput("bottom") or redstone.getInput("left") or redstone.getInput("right") or redstone.getInput("front") or redstone.getInput("back") then
        print("Redstone signal detected! Starting movie playback...")
        playMovie()
    end
    os.sleep(0.1)
end
